generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  role          UserRole  @default(CONSUMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts            Account[]
  sessions            Session[]
  renovationRequests  RenovationRequest[]
  consumerMatches     Match[] @relation("ConsumerMatches")
  contractorMessages  Message[] @relation("ContractorMessages")
  userMessages        Message[] @relation("UserMessages")
  contractorProfile   Contractor?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Contractor {
  id           String   @id @default(cuid())
  userId       String?  @unique
  companyName  String   @unique
  city         String
  rating       Float    @default(0)
  reviewCount  Int      @default(0)
  specialties  String   // JSON string array
  verified     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user    User?   @relation(fields: [userId], references: [id])
  matches Match[]
}

model RenovationTemplate {
  id         String   @id @default(cuid())
  slug       String   @unique
  title      String
  summary    String
  categories String   // JSON string array
  avgPrice   Float
  duration   String
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  requestTemplates RequestTemplate[]
  matches         Match[]
}

model RenovationRequest {
  id        String   @id @default(cuid())
  userId    String
  scope     String   // JSON string array
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user             User              @relation(fields: [userId], references: [id])
  requestTemplates RequestTemplate[]
  matches         Match[]
}

model RequestTemplate {
  id         String @id @default(cuid())
  requestId  String
  templateId String
  order      Int

  request  RenovationRequest   @relation(fields: [requestId], references: [id])
  template RenovationTemplate @relation(fields: [templateId], references: [id])

  @@unique([requestId, templateId])
}

model Match {
  id           String   @id @default(cuid())
  userId       String
  contractorId String
  templateId   String
  requestId    String
  status       MatchStatus @default(MATCHED)
  nameRevealed Boolean  @default(false)
  revealedAt   DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User              @relation("ConsumerMatches", fields: [userId], references: [id])
  contractor Contractor        @relation(fields: [contractorId], references: [id])
  template   RenovationTemplate @relation(fields: [templateId], references: [id])
  request    RenovationRequest @relation(fields: [requestId], references: [id])
  messages   Message[]
  visits     Visit[]

  @@unique([requestId, contractorId, templateId])
}

model Message {
  id                 String   @id @default(cuid())
  matchId            String
  authorUserId       String?
  authorContractorId String?
  content            String
  isFiltered         Boolean  @default(false)
  createdAt          DateTime @default(now())

  match            Match       @relation(fields: [matchId], references: [id])
  authorUser       User?       @relation("UserMessages", fields: [authorUserId], references: [id])
  authorContractor User?       @relation("ContractorMessages", fields: [authorContractorId], references: [id])
}

model Visit {
  id            String      @id @default(cuid())
  matchId       String
  proposedSlots String      // JSON string array
  scheduledAt   DateTime?
  status        VisitStatus @default(PROPOSED)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  match Match @relation(fields: [matchId], references: [id])
}

enum UserRole {
  CONSUMER
  CONTRACTOR
  ADMIN
}

enum MatchStatus {
  MATCHED
  CHATTING
  VISIT_PROPOSED
  VISIT_CONFIRMED
  COMPLETED
  CANCELLED
}

enum VisitStatus {
  PROPOSED
  CONFIRMED
  COMPLETED
  CANCELLED
}
